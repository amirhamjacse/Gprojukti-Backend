name: CI/CD Pipeline

on:
  push:
    branches: [ staging ]
  pull_request:
    branches: [ staging ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout from repository
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Create .env file
        run: |
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "FCM_SERVER_KEY=" >> .env
          echo "EMAIL_BACKEND=${{ secrets.EMAIL_BACKEND }}" >> .env
          echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
          echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env
          echo "EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}" >> .env
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=" >> .env
          echo "AWS_STORAGE_BUCKET_NAME_DEV=" >> .env
          echo "AWS_STORAGE_BUCKET_NAME=" >> .env
          echo "AWS_S3_CUSTOM_DOMAIN=" >> .env
          echo "AWS_S3_ENDPOINT_URL=" >> .env
          echo "AWS_LOCATION=" >> .env
          echo "AWS_MEDIA_LOCATION=" >> .env
          echo "AWS_DEFAULT_REGION=" >> .env
          echo "CELERY_BROKER_URL=" >> .env
          echo "CELERY_RESULT_BACKEND=" >> .env
          echo "EDESH_URL=" >> .env
          echo "EDESH_ACCESS_TOKEN=" >> .env
          echo "EDESH_TEST_URL=" >> .env

      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SERVER_HOST }}
          username: ${{ secrets.DEV_SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.DEV_SERVER_PORT }}
          script: |
            cd StagingBackend/gporjukti_backend_v2
            sudo find . -name '*.pyc' -delete

      - name: Rsync deployments
        uses: burnett01/rsync-deployments@5.2.1
        with:
          remote_host: ${{ secrets.DEV_SERVER_HOST }}
          remote_user: ${{ secrets.DEV_SERVER_USERNAME }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}
          switches: -avzr --delete
          path: ./*
          remote_path: /root/StagingBackend/gporjukti_backend_v2

  deploy:
    needs: [build]
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SERVER_HOST }}
          username: ${{ secrets.DEV_SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.DEV_SERVER_PORT }}
          script: |
            cd /root/StagingBackend/gporjukti_backend_v2
            docker system prune -f
            docker compose build web
            docker-compose down
            docker compose up --no-deps -d web celery redis flower
